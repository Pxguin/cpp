C - Fountains

There are three cases:
 - Buy one with coins & one with diamonds
 - Buy both with coins
 - Buy both with diamonds

We can consider each separately. First, we can sort the fountains into two arrays (coins & diamonds).

Case 1:
Take the fountain with the max beauty (and a cost under the budget) from both arrays

Case 2:
We want to, for every fountain, find the ones that can be bought as well.
More formally, for every fountain X, find all fountains Y such that X.p+Y.p <= C, where .p denotes the price and C is the budget.
Then, we take the maximum beauty from all suitable fountain Y.

Normally it takes O(N^2), but with the help of a monotonic stack (vector in my solution) it takes O(N).
 - A similar application is used in USACO 2018 Feb Gold: Snow Boots, and Cow Frisbee from 2022 Jan Silver.
Then, we can use prefix maxima to find the max beauty.

However, there is the special (and annoying) rule that we can't build the same fountain twice.

In other words, the issue is that the maximum value might link back to the current fountain that we are checking,
which results in the same fountain being built two times.

To solve this, we can figure out the prefix first and second maximums, and take the second maximum if the first links to the current one.

Case 3: 
Repeat case 2, but for diamonds.

Code:
It is definitely possible to calculate the max values for case 1 while calculating the other cases (simultaneously).
The editorial solution is easier in that it splits up the two cases:
X.p = Y.p (which takes care of building the same fountain twice)
X.p < Y.p (every other fountain)



D - Field Expansion

First, we only have to consider 34 extensions, because log2 100000 rounds up to 17, and there are two sides.
 - Clearly, we want the largest 34.
We also need to consider if we want to rotate the original field before expansion.
 - It may seem like we want to match the shorter sides to the shorter sides and vice versa, but this actually doesn't work.
 - There might be a faster solution, but we can simply just try both orientations and take the minimum.
 - Here is a test case illustrating this: 43829 19653 2 1 34; all extensions are 4
 - Matching 43829 to 2, it takes 16, but matching it to 1 it only takes 15.

We can then use knapsack dp to find all possible subsets. However, two issues remain:
1) How do we ensure we use the minimum amount of extensions, given we can't store all the subsets?
2) How do we calculate the second factor (width/height) given the first?

1) We can prove that the minimum # of extensions used (denoted K) are going to always be the K largest extensions.
If we can't achieve it with all K-1, then it is impossible to achieve it with only K-1 of the K extensions.
Therefore, we can just do a knapsack starting from the largest extensions, and stop once we get a valid answer.

2) Note that the subset doesn't matter; if we have K as the product of all extensions considered so far and have used up a product of P, then we have K/P leftover.
But K will very easily overflow; it also doesn't help to cap it at some value.
The first observation we can make is that any P over 100,000 is unnecessary, and we only have to store the minimum P greater than that.
Second, we can store some arbitrary subset multiplying to P with bits - which subset doesn't matter, as long as the product is P.
Then the leftover is the product of the bits that are turned off (turned off = unused, on = used in product P).



E - Aquarium Decoration

This might be the messiest code I've ever written, but this problem is much above what I normally do anyways;
(also pretty much 100% solved it by myself, which is nice)

We can label each decoration as either being liked only by Masha (array A), Arkady (array B), both (C), or no one (D).
We can then split the problem into two parts: calculating the amount needed to satisfy K, then filling up the remaining decorations.
In other words, we choose some subset of size X to satisfy the constraints on K, then choose the remaining minimum M-K decorations.

To solve the first part, I first, to minimize the toll on M, took as many of array C as needed.
 - They contribute the most to K (2) while contributing the least to M (only 1).
Then, we can satisfy K by taking one from arrays A and B, contributing both 2 to K and M.

Now, we need to trade off some of array C for arrays A and B, because the strategy of taking as many as possible may not be optimal.
But it turns out there is no greedy strategy, and we have to simply brute force all possibilities and take the minimum.
 - To do this, I store a set of all remaining, leftover decorations.
 - If we need X more decorations, then we just take the prefix sum of length X from this set to get our minimum.
 - I iterate in descending order on array C, and every time, this adds two elements from A and B to the set, and removes one from array C.
 - Then, I just have to check if the new elements fall into the current range X, and if so update the sum accordingly.

Here are some spots in the code that can be improved:
 - I assign each value in the set an index to make them unique, but they are unnecessary and can be replaced with a multiset.
 - I deepcopy array A and B twice (stored as heaps).
 - This algorithm is more easily done iterating in ascending order over array C, rather than descending like I did.
