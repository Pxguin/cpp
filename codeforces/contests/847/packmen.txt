Where T is the minimum time taken to eat all asterisks (the answer):
 - if T works, then T+1 works. Therefore, we can binary search on the answer.

To check if a T works, consider the fact that all Packmen have T seconds to eat as many asterisks as possible. Optimally, we want them to eat unique ones.
Also, the first packman must eat the leftmost asterisk. From here, we can just calculate the rightmost one that it can also eat within the given time T.

The next Packman probably doesn't want to go to already eaten asterisks, so it has T seconds to go to uneaten ones. We would want it to eat the leftmost ones, because it is the closest to them.
So we calculate how long it takes for this Packman to get to the leftmost uneaten asterisk, and then figure out if it can eat any extra ones on the right within T seconds.
 - We can repeat this for every subsequent Packman. If all the asterisks are eaten, then T works.


To calculate if a Packman can eat some asterisks in T time, consider this example: *P**
It takes one second to go the left, then one second to come back, then two seconds to go to the right.  (1*2)+1 = 3 seconds

Consider this example though: **P*
It takes two seconds to go the left, two to come back, and one to go to the right. (2*2+1) = 5 seconds.
However, if you go to the right first, then it takes one second to the right, one second back, and two seconds to the left. (1*2+1) = 3 seconds.

Therefore, for every asterisk, we want to consider whether going to the left or right first is more optimal, and compare that value to T.