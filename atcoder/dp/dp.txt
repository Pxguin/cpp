A - Frog 1

Very simple dp; we could naively run all possible combinations but we notice that we reach some stones over and over again across all possibilities.
It is only helpful to know the minimum cost for each stone; minimum leads to minimum so we store just that.
dp[i+1] = min(dp[i+1],dp[i]+(h[i+1]-h[i])).
dp[i+2] = min(dp[i+2],dp[i]+(h[i+2]-h[i])).


B - Frog 2

Same logic as above, but repeat for all K stones, leading to an O(NK) solution.


C - Vacation

Define dp[i][j] as the maximum for the first i days, given that the last activity done was j.
Then for dp[i][0], try adding b[i] and c[i], for dp[i][1], try a[i] and c[i], and for dp[i][2] try a[i] and b[i].


P - Independent Set

If a node is colored black then its parent cannot be colored black as well. In all cases though it can be colored white.
Define dp[i] as a pair storing {ways to color this subtree such that node i is white; same thing but node i is black}.
Then do a dfs bottom-up where 
 - dp[i][white] *= (dp[child][white]+dp[child][black]) for all children.
 - dp[i][black] *= dp[child][white] for all children.