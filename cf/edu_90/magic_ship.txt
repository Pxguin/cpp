The key observation is that it you can split up the moves caused by the wind and the moves that the ship makes.
 - There is no need for a greedy algorithm, because you can just calculate the position of the ship with no moves, and then figure out if it's possible to get to the destination from this point.

The second observation is that the answer D is monotonic. If you reach the end, then you can just go against the wind for the rest of the moves, so binary search is possible.

Combining these, we get the solution of:
 - Binary search on the answer D
 - To check for it, calculate the position of the ship after D days
 - Calculate the Manhattan distance of this position and the destination
 - If this distance is <= D, then you can get to the destination.

However, how do you calculate the position of the ship for all D?

Assuming a string S of max length, and filled with L's only with an R at the end (LLLLLLL...R), and the start points of (0,0) and (10^9, 0), it can be shown that the max length distance is 1e5 (max length N) * 1e9 (max distance), or 10^14.
 - The minimum distance is simply 1, because the start and end points are strictly different.

A vector of 10^14 storing every single position is just too much, so there needs to be a more memory-efficient way to calculate this.
So instead of calculating all positions, you simply store the amount of L's, R's, U's, and D's at any given day.
 - This works because the wind works in a cycle. When you reach the end, you just start back at the beginning.
 - Therefore, we can just calculate the amount of distance traveled up, down, left, and right using these sums, and then add them to the start point to find the end point.
 - From here, we can just test the above algorithm to check if it works.