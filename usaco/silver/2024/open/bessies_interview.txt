We can first just simulate the process. If two farmers finish at the same time, we'll arbitrarily pick one.
Let the farmer that picks Bessie to be farmer B, finishing at time T.

If there was a farmer that just finished interviewing at the same time as farmer B, then that farmer is also a candidate.
Generalizing this, for any farmers that finished interviewing simultaneously, they are candidates.

We will now go backwards to consider previous events.
For any farmers K that finished with farmer B, any farmers that finished with them before time T could take the spot of farmer K.
Therefore, those farmers are also viable candidates. We would repeat this process to find all possible farmers.

How would we do this efficiently? If any farmers finish simultaneously, then we can connect them all with edges of weight t.
 - t denotes the time of the event.
 - To avoid creating N^2 edges, we can connect farmer 1 to 2, 2 to 3, 3 to 4, and so on. We can still reach all farmers this way.

Then, we start from node B and go through the graph. If there is an edge with weight <= T, then that farmer is ok.
 - Then we go to that farmer with the time now set to the weight of the edge, and continue the process.
 - We can use Dijsktra to prioritize higher weight edges, so there is less recomputation.

Time complexity: There will be N edges at most (N/K * K), and the initial simulation takes N log K, so it runs.

For the extension of computing the probability for each farmer, I believe it suffices to:
 - Count the number of edges for each node that is <= the latest time the node can be visited (P)
 - Answer for that farmer is P/sum of all P
(has not been tested though)