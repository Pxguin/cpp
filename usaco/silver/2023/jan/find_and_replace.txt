How can you determine whether the string is unable to be changed?

This is basically a function. If a character in the initial string maps to two different characters in the goal string, then it works (the second one is later).

So we can come to the conclusion that we can treat this as a graph problem: some letters map to other letters, i.e. an edge between two letter vertices.

Obviously, the answer increases by one for every edge, but there's also special case in the third test case: ABCD -> BACD
 - A maps to B, and B maps to A. To solve this, A must be changed to a temporary character. A -> E, B -> A, and E -> B.

It's important to note that this is only necessary when nothing leads into the cycle (I will call this an isolated cycle).
 - A -> B, B -> C, C -> A works, but A -> B, B -> C, C -> A, D -> B doesn't because two nodes lead to B (first change A to D, and now the cycle is broken).  


This leads us to our second fail case:
 - If there are changes to be made (initial != goal) and the goal contains all 52 unique characters, then you won't be able to change the string, because:
   Either one character maps to two characters, or in the case of an isolated cycle, there are no leftover/temporary characters to use.

So we want to figure out what every character maps to, then check for any cycles. If there is one, then we need to increase the answer by one, because we have to use an extra operation to convert to a temporary character.